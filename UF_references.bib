
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Workspace loaded from ~/.RData]

> #PACKAGES & SETUP
> 
> ##Packages
> library(brms)
Loading required package: Rcpp
Loading 'brms' package (version 2.21.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following object is masked from ‘package:stats’:

    ar

> library(tidyverse)
── Attaching core tidyverse packages ─────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.0     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ───────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package to force all conflicts to become errors
> library(openxlsx)
> library(mlogit)
Loading required package: dfidx

Attaching package: ‘dfidx’

The following object is masked from ‘package:stats’:

    filter

> library(car)
Loading required package: carData

Attaching package: ‘car’

The following object is masked from ‘package:dplyr’:

    recode

The following object is masked from ‘package:purrr’:

    some

> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loaded glmnet 4.1-8
> library(boot)

Attaching package: ‘boot’

The following object is masked from ‘package:car’:

    logit

> library(gtools)

Attaching package: ‘gtools’

The following objects are masked from ‘package:boot’:

    inv.logit, logit

The following object is masked from ‘package:glmnet’:

    na.replace

The following object is masked from ‘package:car’:

    logit

The following objects are masked from ‘package:brms’:

    ddirichlet, rdirichlet

> library(tidymodels)
── Attaching packages ───────────────────────────────── tidymodels 1.2.0 ──
✔ broom        1.0.5      ✔ rsample      1.2.1 
✔ dials        1.2.1      ✔ tune         1.2.0 
✔ infer        1.0.7      ✔ workflows    1.1.4 
✔ modeldata    1.3.0      ✔ workflowsets 1.1.0 
✔ parsnip      1.2.1      ✔ yardstick    1.3.1 
✔ recipes      1.0.10     
── Conflicts ──────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard()       masks purrr::discard()
✖ Matrix::expand()        masks tidyr::expand()
✖ dfidx::filter()         masks dplyr::filter(), stats::filter()
✖ recipes::fixed()        masks stringr::fixed()
✖ dplyr::lag()            masks stats::lag()
✖ dials::mixture()        masks brms::mixture()
✖ Matrix::pack()          masks tidyr::pack()
✖ rsample::permutations() masks gtools::permutations()
✖ rsample::populate()     masks Rcpp::populate()
✖ car::recode()           masks dplyr::recode()
✖ car::some()             masks purrr::some()
✖ yardstick::spec()       masks readr::spec()
✖ recipes::step()         masks stats::step()
✖ Matrix::unpack()        masks tidyr::unpack()
✖ recipes::update()       masks Matrix::update(), stats::update()
• Dig deeper into tidy modeling with R at https://www.tmwr.org
> library(MLmetrics)

Attaching package: ‘MLmetrics’

The following object is masked from ‘package:base’:

    Recall

> library(ROCR)
> library(lme4)

Attaching package: ‘lme4’

The following object is masked from ‘package:brms’:

    ngrps

> library(rstanarm)
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())

Attaching package: ‘rstanarm’

The following object is masked from ‘package:gtools’:

    logit

The following object is masked from ‘package:boot’:

    logit

The following object is masked from ‘package:car’:

    logit

The following objects are masked from ‘package:brms’:

    dirichlet, exponential, get_y, lasso, ngrps

> library(DescTools)

Attaching package: ‘DescTools’

The following objects are masked from ‘package:MLmetrics’:

    AUC, Gini, MAE, MAPE, MSE, RMSE

The following object is masked from ‘package:car’:

    Recode

> library(cmdstanr)
This is cmdstanr version 0.5.3
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /Users/alexhoward/.cmdstan/cmdstan-2.33.1
- CmdStan version: 2.33.1

A newer version of CmdStan is available. See ?install_cmdstan() to install it.
To disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE.
> library(posterior)
This is posterior version 1.5.0

Attaching package: ‘posterior’

The following objects are masked from ‘package:stats’:

    mad, sd, var

The following objects are masked from ‘package:base’:

    %in%, match

> library(rethinking)
Loading required package: parallel
rethinking (Version 2.40)

Attaching package: ‘rethinking’

The following objects are masked from ‘package:rstanarm’:

    logit, se

The following object is masked from ‘package:gtools’:

    logit

The following object is masked from ‘package:boot’:

    logit

The following object is masked from ‘package:car’:

    logit

The following object is masked from ‘package:purrr’:

    map

The following objects are masked from ‘package:brms’:

    LOO, stancode, WAIC

The following object is masked from ‘package:stats’:

    rstudent

> library(AMR)
Registered S3 method overwritten by 'AMR':
  method   from  
  plot.sir igraph

Attaching package: ‘AMR’

The following object is masked from ‘package:DescTools’:

    %like%

> library(caret)
Loading required package: lattice

Attaching package: ‘lattice’

The following object is masked from ‘package:boot’:

    melanoma


Attaching package: ‘caret’

The following objects are masked from ‘package:DescTools’:

    MAE, RMSE

The following objects are masked from ‘package:rstanarm’:

    compare_models, R2

The following objects are masked from ‘package:MLmetrics’:

    MAE, RMSE

The following objects are masked from ‘package:yardstick’:

    precision, recall, sensitivity, specificity

The following object is masked from ‘package:purrr’:

    lift

> library(data.table)
data.table 1.15.2 using 1 threads (see ?getDTthreads).  Latest news: r-datatable.com
**********
This installation of data.table has not detected OpenMP support. It should still work but in single-threaded mode.
This is a Mac. Please read https://mac.r-project.org/openmp/. Please engage with Apple and ask them for support. Check r-datatable.com for updates, and our Mac instructions here: https://github.com/Rdatatable/data.table/wiki/Installation. After several years of many reports of installation problems on Mac, it's time to gingerly point out that there have been no similar problems on Windows or Linux.
**********

Attaching package: ‘data.table’

The following objects are masked from ‘package:AMR’:

    %like%, like

The following object is masked from ‘package:DescTools’:

    %like%

The following objects are masked from ‘package:lubridate’:

    hour, isoweek, mday, minute, month, quarter, second, wday, week, yday, year

The following objects are masked from ‘package:dplyr’:

    between, first, last

The following object is masked from ‘package:purrr’:

    transpose

> library(devtools)
Loading required package: usethis

Attaching package: ‘devtools’

The following object is masked from ‘package:recipes’:

    check

> library(MIMER)
> library(corrplot)
corrplot 0.92 loaded
> library(glue)
> library(pak)

Attaching package: ‘pak’

The following object is masked from ‘package:tidymodels’:

    pkg_deps

> library(touch)
> library(sna)
Loading required package: statnet.common

Attaching package: ‘statnet.common’

The following object is masked from ‘package:rethinking’:

    log_sum_exp

The following objects are masked from ‘package:base’:

    attr, order

Loading required package: network

‘network’ 1.18.2 (2023-12-04), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information


Attaching package: ‘network’

The following object is masked from ‘package:DescTools’:

    %c%

sna: Tools for Social Network Analysis
Version 2.7-2 created on 2023-12-05.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
 For citation information, type citation("sna").
 Type help(package="sna") to get started.


Attaching package: ‘sna’

The following object is masked from ‘package:dials’:

    degree

> library(coin)
Loading required package: survival

Attaching package: ‘survival’

The following object is masked from ‘package:caret’:

    cluster

The following object is masked from ‘package:boot’:

    aml

The following object is masked from ‘package:brms’:

    kidney


Attaching package: ‘coin’

The following object is masked from ‘package:sna’:

    rperm

The following object is masked from ‘package:posterior’:

    variance

The following object is masked from ‘package:infer’:

    chisq_test

The following object is masked from ‘package:scales’:

    pvalue

> library(rlang)

Attaching package: ‘rlang’

The following objects are masked from ‘package:statnet.common’:

    base_env, empty_env

The following object is masked from ‘package:data.table’:

    :=

The following object is masked from ‘package:gtools’:

    chr

The following objects are masked from ‘package:purrr’:

    %@%, flatten, flatten_chr, flatten_dbl, flatten_int, flatten_lgl, flatten_raw,
    invoke, splice

> library(reticulate)
> library(brms)
> library(reshape2)

Attaching package: ‘reshape2’

The following objects are masked from ‘package:data.table’:

    dcast, melt

The following object is masked from ‘package:tidyr’:

    smiths

> library(ggsci)
Warning message:
package ‘ggsci’ was built under R version 4.3.3 
> library(dendextend)

---------------------
Welcome to dendextend version 1.17.1
Type citation('dendextend') for how to cite the package.

Type browseVignettes(package = 'dendextend') for the package vignette.
The github page is: https://github.com/talgalili/dendextend/

Suggestions and bug-reports can be submitted at: https://github.com/talgalili/dendextend/issues
You may ask questions at stackoverflow, use the r and dendextend tags: 
	 https://stackoverflow.com/questions/tagged/dendextend

	To suppress this message use:  suppressPackageStartupMessages(library(dendextend))
---------------------


Attaching package: ‘dendextend’

The following object is masked from ‘package:data.table’:

    set

The following object is masked from ‘package:dials’:

    prune

The following object is masked from ‘package:stats’:

    cutree

> library(TSP)
> library(ggrepel)
> library(progress)
> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following object is masked from ‘package:posterior’:

    var

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> library(viridis)
Loading required package: viridisLite

Attaching package: ‘viridis’

The following object is masked from ‘package:scales’:

    viridis_pal

> library(xgboost)

Attaching package: ‘xgboost’

The following object is masked from ‘package:dfidx’:

    slice

The following object is masked from ‘package:dplyr’:

    slice

> library(caret)
> library(foreach)

Attaching package: ‘foreach’

The following object is masked from ‘package:DescTools’:

    %:%

The following objects are masked from ‘package:purrr’:

    accumulate, when

> library(doParallel)
Loading required package: iterators
> library(progress)
> library(lhs)
Warning message:
package ‘lhs’ was built under R version 4.3.3 
> library(knitr)
> library(kableExtra)

Attaching package: ‘kableExtra’

The following object is masked from ‘package:dplyr’:

    group_rows

> library(xtable)
> library(cowplot)

Attaching package: ‘cowplot’

The following object is masked from ‘package:lubridate’:

    stamp

> library(boot)
> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> library(pdftools)
Using poppler version 23.04.0
Warning message:
package ‘pdftools’ was built under R version 4.3.3 
> library(ggpubr)

Attaching package: ‘ggpubr’

The following object is masked from ‘package:cowplot’:

    get_legend

The following object is masked from ‘package:dendextend’:

    rotate

> 
> ##SETUP
> options(error=NULL)
> setwd("/Users/alexhoward/Documents/Projects/UDAST_code/")
> path_to_data <- "/Users/alexhoward/Documents/Projects/UDAST_code/"
> ##Packages
> library(tidyverse)
> library(knitr)
> library(glue)
> library(scales)
> library(coin)
> library(rlang)
> 
> ##Read-in
> ur_util <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/ur_util_manuscript.csv")
> util_probs_df <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/util_probs_df_manuscript.csv")
> desc_tab <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/uf_desctab.csv")
> urines5 <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/urines5.csv")
> abx <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/interim_abx.csv")
> ab_tab <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/ab_tab.csv")
> metrics_singles_table <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/metrics_singles_table.csv")
> prim <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_xg_plot_df.csv")
> pdrx <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/abplot_df.csv")
> pdrx_px_abx <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/abplot_df_px_abx.csv")
> cdi_df<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/cdi_df.csv")
> tox_df<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/tox_df.csv")
> cost_df<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/cost_df.csv")
> cdi_df_px_abx<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/cdi_df_px_abx.csv")
> tox_df_px_abx<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/tox_df_px_abx.csv")
> cost_df_px_abx<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/cost_df_px_abx.csv")
> stabmets <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_stability_metrics.csv")
> timemets <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_time_sens_metrics.csv")
> fairmets <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_fairness_metrics.csv")
> overall_xg_plot_df <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_xg_plot_df.csv")
> overall_xg_plot_df_px_abx <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_xg_plot_df_px_abx.csv")
> urt <- function(df,subtype) {
+   
+   urtot1 <- desc_tab %>% filter(Subtype==subtype) %>% select(`Urine model n (%)`)
+     urtot1 <- sub(" .*", "",urtot1) %>% as.numeric()
+     urtot2 <- desc_tab %>% filter(Subtype==subtype) %>% select(`Urine microsimulation n (%)`)
+     urtot2 <- sub(" .*", "",urtot2) %>% as.numeric()
+     
+     littot <- urtot1+urtot2
+     bigtot <- nrow(urines5)+nrow(ur_util)
+     
+     perc <- ((littot/bigtot)*100) %>% round(1) %>% format(nsmall=1)
+     
+     glue("{perc}%, n={(littot) %>% comma()}")
+ 
+ }
> abt <- function(df,subtype) {
+   
+   urtot1 <- desc_tab %>% filter(Subtype==subtype) %>% select(`Prescription model n (%)`)
+     urtot1 <- sub(" .*", "",urtot1) %>% as.numeric()
+     
+     bigtot <- nrow(abx %>% distinct(subject_id))
+     
+     perc <- ((urtot1/bigtot)*100) %>% round(1) %>% format(nsmall=1)
+     
+     glue("{perc}%, n={(urtot1) %>% comma()}")
+ 
+ }
> abt2 <- function(df,numb) {
+   
+   abname <- df %>% dplyr::slice(numb) %>% select(`Antibiotic(s)`) %>% unlist()
+   urtot1 <- df %>% dplyr::slice(numb) %>% select(`n (%)`) %>% unlist()
+   urtot1 <- sub(" .*", "",urtot1) %>% as.numeric()
+     
+     bigtot <- nrow(abx)
+     
+     perc <- ((urtot1/bigtot)*100) %>% round(1) %>% format(nsmall=1)
+     
+     glue("{abname %>% tolower()} ({perc}%, n={(urtot1) %>% comma()})")
+ 
+ }
> lowsev <- function(df,subtype) {
+   
+   perc_overall <- df %>% filter(Metric==subtype)
+   perc_overall <- perc_overall %>% dplyr::slice(1) %>% select(Percentage) %>% unlist() %>% 
+     round(1)
+   
+   n_overall <- round(nrow(ur_util)*(perc_overall/100)) %>% comma()
+   
+   glue("{perc_overall %>% format(nsmall=1)}% (n={n_overall})")
+   
+ }
> hisev <- function(df,subtype) {
+   
+   perc_overall <- df %>% filter(Metric==subtype)
+   perc_overall <- perc_overall %>% dplyr::slice(nrow(perc_overall)) %>% select(Percentage) %>% unlist() %>% round(1)
+   
+   n_overall <- round(nrow(ur_util)*(perc_overall/100)) %>% comma()
+   
+   glue("{perc_overall %>% format(nsmall=1)}% (n={n_overall})")
+   
+ }
> lowabx <- function(df) {
+   perc <- df %>% filter(`Illness severity`==0) %>% arrange(desc(`Percentage of first-line recommendations`)) %>%
+     dplyr::slice(1) %>% select(`Percentage of first-line recommendations`) %>% 
+   unlist() %>% round(1)
+   
+   numb <- round(nrow(ur_util)*(perc/100)) %>% comma()
+   
+   glue("{perc %>% format(nsmall=1)}%, n={numb}")
+   
+ }
> hiabx <- function(df) {
+   perc <- df %>% filter(`Illness severity`==max(df$`Illness severity`)) %>% arrange(desc(`Percentage of first-line recommendations`)) %>%
+     dplyr::slice(1) %>% select(`Percentage of first-line recommendations`) %>% 
+   unlist() %>% round(1)
+   
+   numb <- round(nrow(ur_util)*(perc/100)) %>% comma()
+   
+   glue("{perc %>% format(nsmall=1)}%, n={numb}")
+   
+ }
> zeroprob <- function(df) {
+   df %>% dplyr::slice(1) %>% select(med) %>% round(3) %>% unlist()
+ }
> maxprob <- function(df) {
+   df %>% dplyr::slice(nrow(df)) %>% distinct(med) %>% select(med) %>% round(3) %>% unlist()
+ }
> aucfilter <- function(df,model) {
+   df %>% filter(Model==model) %>% select(AUROC) %>% unlist()
+ }
> utilsum <- function(df,sliceval,type="median") {
+ 
+   if (type=="median") {
+ top <- util_probs_df %>% group_by(Antimicrobial) %>% summarise(
+   medvals=median(Rx_utility),
+   iq1=quantile(Rx_utility)[2],
+   iq3=quantile(Rx_utility)[4]
+ ) %>% ungroup() %>% arrange(desc(medvals)) %>% 
+   dplyr::slice(sliceval) 
+ 
+ medval <- round(top %>% select(medvals) %>% unlist(),3)
+ iq1 <- round(top %>% select(iq1) %>% unlist(),3)
+ iq3 <- round(top %>% select(iq1) %>% unlist(),3)
+ 
+ glue("{medval}, IQR {iq1} to {iq3}")
+ 
+   } else {
+     
+     glue("{round(df %>% group_by(Antimicrobial) %>% summarise(
+   medvals=median(Rx_utility),
+   iq1=quantile(Rx_utility)[2],
+   iq3=quantile(Rx_utility)[4]
+ ) %>% ungroup() %>% mutate(iqr=iq3-iq1) %>% arrange(desc(iqr)) %>% 
+   dplyr::slice(1) %>% select(iqr) %>% unlist(),3)}")
+     
+   }
+ }
> 
> ###Reference lists
> all_singles <- c("AMP","SAM","TZP","CZO","CRO","CAZ","FEP",
+                  "MEM","CIP","GEN","SXT","NIT","VAN")
> ab_singles <- all_singles
> all_combos <- combn(all_singles, 2, FUN = function(x) paste(x, collapse = "_"))
> all_abs <- c(all_singles,all_combos)
> iv_singles <- c("AMP","SAM","TZP","CIP","FEP","CAZ","CRO","CZO","MEM",
+                 "GEN","SXT","VAN")
> iv_ab_singles <- iv_singles
> iv_combos <- combn(iv_singles, 2, FUN = function(x) paste(x, collapse = "_"))
> all_ivs <- c(iv_singles, iv_combos)
> oral_singles <- c("AMP","SAM","CIP",
+                   "SXT","NIT")
> oral_ab_singles <- oral_singles
> oral_combos <- combn(oral_singles, 2, FUN = function(x) paste(x, collapse = "_"))
> all_orals <- c(oral_singles, oral_combos)
> access_singles <- c("AMP","SAM","GEN",
+                     "SXT","NIT","CZO")
> access_combos <- combn(access_singles, 2, FUN = function(x) paste(x, collapse = "_"))
> all_access <- c(access_singles, access_combos)
> watch_singles <- c("CRO","CAZ","FEP","MEM","TZP","CIP","VAN")
> watch_combos <- combn(watch_singles, 2, FUN = function(x) paste(x, collapse = "_"))
> all_watch <- c(watch_singles, watch_combos)
> antimicrobial_map <- c(
+   "Ampicillin" = "AMP",
+   "Ampicillin-sulbactam" = "SAM",
+   "Piperacillin-tazobactam" = "TZP",
+   "Cefazolin" = "CZO",
+   "Ceftriaxone" = "CRO",
+   "Ceftazidime" = "CAZ",
+   "Cefepime" = "FEP",
+   "Meropenem" = "MEM",
+   "Ciprofloxacin" = "CIP",
+   "Gentamicin" = "GEN",
+   "Trimethoprim-sulfamethoxazole" = "SXT",
+   "Nitrofurantoin" = "NIT",
+   "Vancomycin" = "VAN"
+ )
> map_combinations <- combn(names(antimicrobial_map), 2, simplify = FALSE)
> combined_antimicrobial_map <- c(
+   antimicrobial_map,
+   setNames(
+     lapply(map_combinations, function(x) paste(antimicrobial_map[x], collapse = "_")),
+     sapply(map_combinations, function(x) paste(x, collapse = " & "))
+   )
+ )
> singles_map <- combined_antimicrobial_map[combined_antimicrobial_map%in%all_singles]
> iv_singles_map <- combined_antimicrobial_map[combined_antimicrobial_map%in%iv_singles]
> oral_singles_map <- combined_antimicrobial_map[combined_antimicrobial_map%in%oral_singles]
> modified_abx_map <- combined_antimicrobial_map
> names(modified_abx_map) <- str_replace_all(names(modified_abx_map),
+                                            " & ", "_")
> iv_modified_abx_map <- modified_abx_map[modified_abx_map%in%all_ivs]
> oral_modified_abx_map <- modified_abx_map[modified_abx_map%in%all_orals]
> access_modified_abx_map <- modified_abx_map[modified_abx_map%in%all_access]
> utilsum(util_probs_df,13,"IQR")
2.821
> utilsum <- function(df,sliceval,type="median") {
+ 
+   if (type=="median") {
+ top <- util_probs_df %>% group_by(Antimicrobial) %>% summarise(
+   medvals=median(Rx_utility),
+   iq1=quantile(Rx_utility)[2],
+   iq3=quantile(Rx_utility)[4]
+ ) %>% ungroup() %>% arrange(desc(medvals)) %>% 
+   dplyr::slice(sliceval) 
+ 
+ medval <- round(top %>% select(medvals) %>% unlist(),3)
+ iq1 <- round(top %>% select(iq1) %>% unlist(),3)
+ iq3 <- round(top %>% select(iq3) %>% unlist(),3)
+ 
+ glue("{medval}, IQR {iq1} to {iq3}")
+ 
+   } else {
+     
+     glue("{round(df %>% group_by(Antimicrobial) %>% summarise(
+   medvals=median(Rx_utility),
+   iq1=quantile(Rx_utility)[2],
+   iq3=quantile(Rx_utility)[4]
+ ) %>% ungroup() %>% mutate(iqr=iq3-iq1) %>% arrange(desc(iqr)) %>% 
+   dplyr::slice(1) %>% select(iqr) %>% unlist(),3)}")
+     
+   }
+ }
> utilsum(util_probs_df,1,"IQR")
2.821
> utilsum(util_probs_df,1,"median")
9.312, IQR 8.607 to 9.826
> utilsum(util_probs_df,13,"median")
7.202, IQR 6.176 to 7.811
> utilsum(util_probs_df,14,"median")
7.164, IQR 6.704 to 8.767
> utilsum(util_probs_df,15,"median")
7.151, IQR 6.556 to 8.495
> utilsum(util_probs_df,16,"median")
7.014, IQR 6.434 to 7.914
> utilsum(util_probs_df,1,"median")
9.312, IQR 8.607 to 9.826
> util_probs_df %>% group_by(Antimicrobial) %>% summarise(
+   medvals=median(Rx_utility),
+   iq1=quantile(Rx_utility)[2],
+   iq3=quantile(Rx_utility)[4]
+ ) %>% ungroup() %>% arrange(desc(medvals))
> util_probs_df %>% filter(Antimicrobial %in% ab_singles)
> singles_map
$Ampicillin
[1] "AMP"

$`Ampicillin-sulbactam`
[1] "SAM"

$`Piperacillin-tazobactam`
[1] "TZP"

$Cefazolin
[1] "CZO"

$Ceftriaxone
[1] "CRO"

$Ceftazidime
[1] "CAZ"

$Cefepime
[1] "FEP"

$Meropenem
[1] "MEM"

$Ciprofloxacin
[1] "CIP"

$Gentamicin
[1] "GEN"

$`Trimethoprim-sulfamethoxazole`
[1] "SXT"

$Nitrofurantoin
[1] "NIT"

$Vancomycin
[1] "VAN"

> singles_map %>% names()
 [1] "Ampicillin"                   
 [2] "Ampicillin-sulbactam"         
 [3] "Piperacillin-tazobactam"      
 [4] "Cefazolin"                    
 [5] "Ceftriaxone"                  
 [6] "Ceftazidime"                  
 [7] "Cefepime"                     
 [8] "Meropenem"                    
 [9] "Ciprofloxacin"                
[10] "Gentamicin"                   
[11] "Trimethoprim-sulfamethoxazole"
[12] "Nitrofurantoin"               
[13] "Vancomycin"                   
> util_probs_df %>% filter(Antimicrobial %in% names(singles_map))
> utilsum <- function(df,sliceval,type="median") {
+ 
+   if (type=="median") {
+ top <- util_probs_df %>% filter(Antimicrobial %in%
+                                   names(singles_map)) %>% group_by(Antimicrobial) %>% summarise(
+   medvals=median(Rx_utility),
+   iq1=quantile(Rx_utility)[2],
+   iq3=quantile(Rx_utility)[4]
+ ) %>% ungroup() %>% arrange(desc(medvals)) %>% 
+   dplyr::slice(sliceval) 
+ 
+ medval <- round(top %>% select(medvals) %>% unlist(),3)
+ iq1 <- round(top %>% select(iq1) %>% unlist(),3)
+ iq3 <- round(top %>% select(iq3) %>% unlist(),3)
+ 
+ glue("{medval}, IQR {iq1} to {iq3}")
+ 
+   } else {
+     
+     glue("{round(df %>% %>% filter(Antimicrobial %in%
+                                   names(singles_map)) %>% group_by(Antimicrobial) %>% summarise(
+   medvals=median(Rx_utility),
+   iq1=quantile(Rx_utility)[2],
+   iq3=quantile(Rx_utility)[4]
+ ) %>% ungroup() %>% mutate(iqr=iq3-iq1) %>% arrange(desc(iqr)) %>% 
+   dplyr::slice(1) %>% select(iqr) %>% unlist(),3)}")
+     
+   }
+ }
> utilsum(util_probs_df,13,type="median")
0.834, IQR 0.597 to 1.637
> 
