---
title: "A utility function to improve antibiotic decision-making: a simulation study"
format:
  docx:
    reference-doc: doc_template.docx
bibliography: UF_references.bib
csl: /Users/alexhoward/Zotero/styles/the-lancet-infectious-diseases.csl
editor: visual
---

Alex Howard^1,2^\*, Peter L. Green^3,4^, Alessandro Gerada^1,2^, Yinzheng Zhong^1,3^, David M. Hughes^5^, Anoop Velluva^1^, Simon Maskell^6^, Iain Buchan^3,6^, William Hope^1,2^\*\*\
\
\*corresponding author alexander.howard\@liverpool.ac.uk\
\*senior author\
^1^Department of Clinical Pharmacology, Institute of Systems, Molecular and Integrative Biology, William Henry Duncan Building, 6 West Derby Street, University of Liverpool, Liverpool L7 8TX, UK ^2^Liverpool University Hospitals NHS Foundation Trust, Mount Vernon Street, Liverpool L7 8YE, UK ^3^Civic Health Innovation Labs, University of Liverpool, Liverpool Science Park, 131 Mount Pleasant, Liverpool L3 5TF, UK ^4^Department of Mechanical and Aerospace Engineering, School of Engineering, University of Liverpool, The Quadrangle, Brownlow Hill, L69 3GH ^5^Department of Health Data Science, Institute of Population Health, University of Liverpool, Waterhouse Building Block B, Brownlow Street, Liverpool L69 3GF, UK ^6^Department of Electrical Engineering and Electronics, School of Electrical Engineering Electronics and Computer Science, University of Liverpool, 9 Brownlow Hill, Liverpool L69 3GJ ^7^Department of Public Health, Policy & Systems, Institute of Population Health, University of Liverpool, Waterhouse Building Block B, Brownlow Street, Liverpool L69 3GF, UK

```{r, echo=FALSE,message=FALSE,warning=FALSE}

##Packages
library(tidyverse)
library(knitr)
library(glue)
library(scales)
library(coin)
library(rlang)

##Read-in
ur_util <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/ur_util_manuscript.csv")
util_probs_df <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/util_probs_df_manuscript.csv")
desc_tab <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/uf_desctab.csv")
urines5 <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/urines5.csv")
abx <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/interim_abx.csv")
ab_tab <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/ab_tab.csv")
metrics_singles_table <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/metrics_singles_table.csv")
prim <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_xg_plot_df.csv")
pdrx <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/abplot_df.csv")
pdrx_px_abx <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/abplot_df_px_abx.csv")
cdi_df<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/cdi_df.csv")
tox_df<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/tox_df.csv")
cost_df<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/cost_df.csv")
cdi_df_px_abx<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/cdi_df_px_abx.csv")
tox_df_px_abx<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/tox_df_px_abx.csv")
cost_df_px_abx<- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/cost_df_px_abx.csv")
stabmets <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_stability_metrics.csv")
timemets <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_time_sens_metrics.csv")
fairmets <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_fairness_metrics.csv")
overall_xg_plot_df <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_xg_plot_df.csv")
overall_xg_plot_df_px_abx <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/overall_xg_plot_df_px_abx.csv")

urt <- function(df,subtype) {
  
  urtot1 <- desc_tab %>% filter(Subtype==subtype) %>% select(`Urine model n (%)`)
    urtot1 <- sub(" .*", "",urtot1) %>% as.numeric()
    urtot2 <- desc_tab %>% filter(Subtype==subtype) %>% select(`Urine microsimulation n (%)`)
    urtot2 <- sub(" .*", "",urtot2) %>% as.numeric()
    
    littot <- urtot1+urtot2
    bigtot <- nrow(urines5)+nrow(ur_util)
    
    perc <- ((littot/bigtot)*100) %>% round(1) %>% format(nsmall=1)
    
    glue("{perc}%, n={(littot) %>% comma()}")

}
abt <- function(df,subtype) {
  
  urtot1 <- desc_tab %>% filter(Subtype==subtype) %>% select(`Prescription model n (%)`)
    urtot1 <- sub(" .*", "",urtot1) %>% as.numeric()
    
    bigtot <- nrow(abx %>% distinct(subject_id))
    
    perc <- ((urtot1/bigtot)*100) %>% round(1) %>% format(nsmall=1)
    
    glue("{perc}%, n={(urtot1) %>% comma()}")

}
abt2 <- function(df,numb) {
  
  abname <- df %>% dplyr::slice(numb) %>% select(`Antibiotic(s)`) %>% unlist()
  urtot1 <- df %>% dplyr::slice(numb) %>% select(`n (%)`) %>% unlist()
  urtot1 <- sub(" .*", "",urtot1) %>% as.numeric()
    
    bigtot <- nrow(abx)
    
    perc <- ((urtot1/bigtot)*100) %>% round(1) %>% format(nsmall=1)
    
    glue("{abname %>% tolower()} ({perc}%, n={(urtot1) %>% comma()})")

}
lowsev <- function(df,subtype) {
  
  perc_overall <- df %>% filter(Metric==subtype)
  perc_overall <- perc_overall %>% dplyr::slice(1) %>% select(Percentage) %>% unlist() %>% 
    round(1)
  
  n_overall <- round(nrow(ur_util)*(perc_overall/100)) %>% comma()
  
  glue("{perc_overall %>% format(nsmall=1)}% (n={n_overall})")
  
}
hisev <- function(df,subtype) {
  
  perc_overall <- df %>% filter(Metric==subtype)
  perc_overall <- perc_overall %>% dplyr::slice(nrow(perc_overall)) %>% select(Percentage) %>% unlist() %>% round(1)
  
  n_overall <- round(nrow(ur_util)*(perc_overall/100)) %>% comma()
  
  glue("{perc_overall %>% format(nsmall=1)}% (n={n_overall})")
  
}
lowabx <- function(df) {
  perc <- df %>% filter(`Illness severity`==0) %>% arrange(desc(`Percentage of first-line recommendations`)) %>%
    dplyr::slice(1) %>% select(`Percentage of first-line recommendations`) %>% 
  unlist() %>% round(1)
  
  numb <- round(nrow(ur_util)*(perc/100)) %>% comma()
  
  glue("{perc %>% format(nsmall=1)}%, n={numb}")
  
}
hiabx <- function(df) {
  perc <- df %>% filter(`Illness severity`==max(df$`Illness severity`)) %>% arrange(desc(`Percentage of first-line recommendations`)) %>%
    dplyr::slice(1) %>% select(`Percentage of first-line recommendations`) %>% 
  unlist() %>% round(1)
  
  numb <- round(nrow(ur_util)*(perc/100)) %>% comma()
  
  glue("{perc %>% format(nsmall=1)}%, n={numb}")
  
}
zeroprob <- function(df) {
  df %>% dplyr::slice(1) %>% select(med) %>% round(3) %>% unlist()
}
maxprob <- function(df) {
  df %>% dplyr::slice(nrow(df)) %>% distinct(med) %>% select(med) %>% round(3) %>% unlist()
}
aucfilter <- function(df,model) {
  df %>% filter(Model==model) %>% select(AUROC) %>% unlist()
}
utilsum <- function(df,sliceval,type="median") {

  if (type=="median") {
top <- util_probs_df %>% group_by(Antimicrobial) %>% summarise(
  medvals=median(Rx_utility),
  iq1=quantile(Rx_utility)[2],
  iq3=quantile(Rx_utility)[4]
) %>% ungroup() %>% arrange(desc(medvals)) %>% 
  dplyr::slice(sliceval) 

medval <- round(top %>% select(medvals) %>% unlist(),3)
iq1 <- round(top %>% select(iq1) %>% unlist(),3)
iq3 <- round(top %>% select(iq1) %>% unlist(),3)

glue("{medval}, IQR {iq1} to {iq3}")

  } else {
    
    glue("{round(df %>% group_by(Antimicrobial) %>% summarise(
  medvals=median(Rx_utility),
  iq1=quantile(Rx_utility)[2],
  iq3=quantile(Rx_utility)[4]
) %>% ungroup() %>% mutate(iqr=iq3-iq1) %>% arrange(desc(iqr)) %>% 
  dplyr::slice(1) %>% select(iqr) %>% unlist(),3)}")
    
  }
}

###Reference lists
all_singles <- c("AMP","SAM","TZP","CZO","CRO","CAZ","FEP",
                 "MEM","CIP","GEN","SXT","NIT","VAN")
ab_singles <- all_singles
all_combos <- combn(all_singles, 2, FUN = function(x) paste(x, collapse = "_"))
all_abs <- c(all_singles,all_combos)
iv_singles <- c("AMP","SAM","TZP","CIP","FEP","CAZ","CRO","CZO","MEM",
                "GEN","SXT","VAN")
iv_ab_singles <- iv_singles
iv_combos <- combn(iv_singles, 2, FUN = function(x) paste(x, collapse = "_"))
all_ivs <- c(iv_singles, iv_combos)
oral_singles <- c("AMP","SAM","CIP",
                  "SXT","NIT")
oral_ab_singles <- oral_singles
oral_combos <- combn(oral_singles, 2, FUN = function(x) paste(x, collapse = "_"))
all_orals <- c(oral_singles, oral_combos)
access_singles <- c("AMP","SAM","GEN",
                    "SXT","NIT","CZO")
access_combos <- combn(access_singles, 2, FUN = function(x) paste(x, collapse = "_"))
all_access <- c(access_singles, access_combos)
watch_singles <- c("CRO","CAZ","FEP","MEM","TZP","CIP","VAN")
watch_combos <- combn(watch_singles, 2, FUN = function(x) paste(x, collapse = "_"))
all_watch <- c(watch_singles, watch_combos)
antimicrobial_map <- c(
  "Ampicillin" = "AMP",
  "Ampicillin-sulbactam" = "SAM",
  "Piperacillin-tazobactam" = "TZP",
  "Cefazolin" = "CZO",
  "Ceftriaxone" = "CRO",
  "Ceftazidime" = "CAZ",
  "Cefepime" = "FEP",
  "Meropenem" = "MEM",
  "Ciprofloxacin" = "CIP",
  "Gentamicin" = "GEN",
  "Trimethoprim-sulfamethoxazole" = "SXT",
  "Nitrofurantoin" = "NIT",
  "Vancomycin" = "VAN"
)
map_combinations <- combn(names(antimicrobial_map), 2, simplify = FALSE)
combined_antimicrobial_map <- c(
  antimicrobial_map,
  setNames(
    lapply(map_combinations, function(x) paste(antimicrobial_map[x], collapse = "_")),
    sapply(map_combinations, function(x) paste(x, collapse = " & "))
  )
)
singles_map <- combined_antimicrobial_map[combined_antimicrobial_map%in%all_singles]
iv_singles_map <- combined_antimicrobial_map[combined_antimicrobial_map%in%iv_singles]
oral_singles_map <- combined_antimicrobial_map[combined_antimicrobial_map%in%oral_singles]
modified_abx_map <- combined_antimicrobial_map
names(modified_abx_map) <- str_replace_all(names(modified_abx_map),
                                           " & ", "_")
iv_modified_abx_map <- modified_abx_map[modified_abx_map%in%all_ivs]
oral_modified_abx_map <- modified_abx_map[modified_abx_map%in%all_orals]
access_modified_abx_map <- modified_abx_map[modified_abx_map%in%all_access]

##S IQR for cefazolin
wideiqr <- util_probs_df %>% group_by(Antimicrobial) %>% 
  summarise(iqr=IQR(S)) %>% arrange(desc(iqr)) %>% 
  dplyr::slice(1) %>% select(iqr) %>% unlist()

##Counting instances of resistance
res <- ur_util %>% filter(acuity==3) %>% select(AMP:VAN)
res[res=="R"|res=="NT"] <- "1"
res[res=="S"|res=="I"] <- "0"
res <- res %>% mutate(across(everything(),as.numeric))
n3 <- sum(res)
p3 <- round((n3/(ncol(res)*nrow(res)))*100,1)
res2 <- ur_util %>% filter(acuity==0) %>% select(AMP:VAN)
res2[res2=="R"|res2=="NT"] <- "1"
res2[res2=="S"|res2=="I"] <- "0"
res2 <- res2 %>% mutate(across(everything(),as.numeric))
n0 <- sum(res2)
p0 <- round((n0/(ncol(res2)*nrow(res2)))*100,1)
t0 <- glue("{p0}% of results, n={n0}")
t3 <- glue("{p3}% of results, n={n3}")

##Chi-squared tests for proportions of first-line coverage
n_all <- c(nrow(ur_util), nrow(ur_util))

###All antibiotics
x_all <- c(nrow(ur_util %>% filter((PDRx_1_result=="S"|PDRx_1_result=="I"))), nrow(ur_util %>% filter((Px_Abx_result=="S"|Px_Abx_result=="I"))))
perc_all1 <- round(prop.test(x_all, n_all)$estimate[1], 3)
perc_all2 <- round(prop.test(x_all, n_all)$estimate[2], 3)
p2_all <- round(prop.test(x_all, n_all)$p.value, 3)
ci1_all <- round(prop.test(x_all, n_all)$conf.int[1], 3)
ci2_all <- round(prop.test(x_all, n_all)$conf.int[2], 3)

chi_all <- glue("({perc_all1} versus {perc_all2}, 95% CI of difference {ci1_all} to {ci2_all}, p{ifelse(p2_all<0.001,'<0.001',paste(' =',p2_all))})")

##Access antibiotics
x_acs <- c(nrow(ur_util %>% filter((PDRx_1_result=="S"|PDRx_1_result=="I")&PDRx_1%in%access_singles)), nrow(ur_util %>% filter((Px_Abx_result=="S"|Px_Abx_result=="I")&Px_Abx%in%access_modified_abx_map)))
perc_acs1 <- round(prop.test(x_acs, n_all)$estimate[1], 3)
perc_acs2 <- round(prop.test(x_acs, n_all)$estimate[2], 3)
p2_acs <- round(prop.test(x_acs, n_all)$p.value, 3)
ci1_acs <- round(prop.test(x_acs, n_all)$conf.int[1], 3)
ci2_acs <- round(prop.test(x_acs, n_all)$conf.int[2], 3)

chi_acs <- glue("({perc_acs1} versus {perc_acs2}, 95% CI of difference {ci1_acs} to {ci2_acs}, p{ifelse(p2_acs<0.001,'<0.001',paste(' =',p2_acs))})")

###Oral antibiotics
x_orals <- c(nrow(ur_util %>% filter((PDRx_1_result=="S"|PDRx_1_result=="I")&PDRx_1%in%oral_singles)), nrow(ur_util %>% filter((Px_Abx_result=="S"|Px_Abx_result=="I")&Px_Abx%in%oral_modified_abx_map)))
perc_orals1 <- round(prop.test(x_orals, n_all)$estimate[1], 3)
perc_orals2 <- round(prop.test(x_orals, n_all)$estimate[2], 3)
p2_orals <- round(prop.test(x_orals, n_all)$p.value, 3)
ci1_orals <- round(prop.test(x_orals, n_all)$conf.int[1], 3)
ci2_orals <- round(prop.test(x_orals, n_all)$conf.int[2], 3)

chi_orals <- glue("({perc_orals1} versus {perc_orals2}, 95% CI of difference {ci1_orals} to {ci2_orals}, p{ifelse(p2_orals<0.001,'<0.001',paste(' =',p2_orals))})")

###IV antibiotics
x_ivs <- c(nrow(ur_util %>% filter((PDRx_1_result=="S"|PDRx_1_result=="I")&PDRx_1%in%iv_singles)), nrow(ur_util %>% filter((Px_Abx_result=="S"|Px_Abx_result=="I")&Px_Abx%in%iv_modified_abx_map)))
perc_ivs1 <- round(prop.test(x_ivs, n_all)$estimate[1], 3)
perc_ivs2 <- round(prop.test(x_ivs, n_all)$estimate[2], 3)
p2_ivs <- round(prop.test(x_ivs, n_all)$p.value, 3)
ci1_ivs <- round(prop.test(x_ivs, n_all)$conf.int[1], 3)
ci2_ivs <- round(prop.test(x_ivs, n_all)$conf.int[2], 3)

chi_ivs <- glue("({perc_ivs1} versus {perc_ivs2}, 95% CI of difference {ci1_ivs} to {ci2_ivs}, p{ifelse(p2_ivs<0.001,'<0.001',paste(' =',p2_ivs))})")

##Percentage comparison at high illness severity
perc_util <- overall_xg_plot_df %>% filter(Metric=="All agents"&Weight==3) %>% select(Percentage) %>% unlist()
perc_actual <- overall_xg_plot_df_px_abx %>% filter(Metric=="All agents"&Weight==3) %>% select(Percentage) %>% unlist()

##Wilcoxon test for numbers of antibiotics with coverage in teh top six
m_aut_all <- median(ur_util$n_allS_PDRx6,na.rm=T)
m_stan_all <- median(ur_util$n_allS_standard6)
m_aut_acs <- median(ur_util$n_acS_PDRx6)
m_stan_acs <- median(ur_util$n_acS_standard6)
m_aut_pos <- median(ur_util$n_poS_PDRx6)
m_stan_pos <- median(ur_util$n_poS_standard6)
m_aut_ivs <- median(ur_util$n_ivS_PDRx6)
m_stan_ivs <- median(ur_util$n_ivS_standard6)

iq1aut_all <- quantile(ur_util$n_allS_PDRx6)[2]
iq1stan_all <- quantile(ur_util$n_allS_standard6)[2]
iq1aut_acs <- quantile(ur_util$n_acS_PDRx6)[2]
iq1stan_acs <- quantile(ur_util$n_acS_standard6)[2]
iq1aut_pos <- quantile(ur_util$n_poS_PDRx6)[2]
iq1stan_pos <- quantile(ur_util$n_poS_standard6)[2]
iq1aut_ivs <- quantile(ur_util$n_ivS_PDRx6)[2]
iq1stan_ivs <- quantile(ur_util$n_ivS_standard6)[2]

iq3aut_all <- quantile(ur_util$n_allS_PDRx6)[4]
iq3stan_all <- quantile(ur_util$n_allS_standard6)[4]
iq3aut_acs <- quantile(ur_util$n_acS_PDRx6)[4]
iq3stan_acs <- quantile(ur_util$n_acS_standard6)[4]
iq3aut_pos <- quantile(ur_util$n_poS_PDRx6)[4]
iq3stan_pos <- quantile(ur_util$n_poS_standard6)[4]
iq3aut_ivs <- quantile(ur_util$n_ivS_PDRx6)[4]
iq3stan_ivs <- quantile(ur_util$n_ivS_standard6)[4]

p_acs <- round(wilcox.test(ur_util %>% pull(n_acS_PDRx6), ur_util %>% pull(n_acS_standard6), paired = TRUE, conf.int = TRUE)$p.value, 3)
p_all <- round(wilcox.test(ur_util %>% pull(n_allS_PDRx6), ur_util %>% pull(n_allS_standard6), paired = TRUE, conf.int = TRUE)$p.value, 3)
p_po <- round(wilcox.test(ur_util %>% pull(n_poS_PDRx6), ur_util %>% pull(n_poS_standard6), paired = TRUE, conf.int = TRUE)$p.value, 3)
p_iv <- round(wilcox.test(ur_util %>% pull(n_ivS_PDRx6), ur_util %>% pull(n_ivS_standard6), paired = TRUE, conf.int = TRUE)$p.value, 3)

z_access <- statistic(wilcoxsign_test(as.formula(paste0(quo_text(ur_util$n_acS_PDRx6), " ~ ", quo_text(ur_util$n_acS_standard6))), data = ur_util), "standardized")[1]
acs_effectsize <- round(z_access / sqrt(nrow(ur_util)), 3)

z_all <- statistic(wilcoxsign_test(as.formula(paste0(quo_text(ur_util$n_allS_PDRx6), " ~ ", quo_text(ur_util$n_allS_standard6))), data = ur_util), "standardized")[1]
all_effectsize <- round(z_all / sqrt(nrow(ur_util)), 3)

z_po <- statistic(wilcoxsign_test(as.formula(paste0(quo_text(ur_util$n_poS_PDRx6), " ~ ", quo_text(ur_util$n_poS_standard6))), data = ur_util), "standardized")[1]
po_effectsize <- round(z_po / sqrt(nrow(ur_util)), 3)

z_iv <- statistic(wilcoxsign_test(as.formula(paste0(quo_text(ur_util$n_ivS_PDRx6), " ~ ", quo_text(ur_util$n_ivS_standard6))), data = ur_util), "standardized")[1]
iv_effectsize <- round(z_iv / sqrt(nrow(ur_util)), 3)

wil_all <- glue("(median {m_aut_all}, IQR {iq1aut_all} to {iq3aut_all} versus median {m_stan_all}, IQR {iq1stan_all} to {iq3stan_all}, p{ifelse(p_all<0.001,'<0.001',paste(' =',p_all))}, effect size {all_effectsize})")

wil_acs <- glue("(median {m_aut_acs}, IQR {iq1aut_acs} to {iq3aut_acs} versus median {m_stan_acs}, IQR {iq1stan_acs} to {iq3stan_acs}, p{ifelse(p_acs<0.001,'<0.001',paste(' =',p_acs))}, effect size {acs_effectsize})")

wil_po <- glue("(median {m_aut_pos}, IQR {iq1aut_pos} to {iq3aut_pos} versus median {m_stan_pos}, IQR {iq1stan_pos} to {iq3stan_pos}, p{ifelse(p_po<0.001,'<0.001',paste(' =',p_po))}, effect size {po_effectsize})")

wil_iv <- glue("(median {m_aut_ivs}, IQR {iq1aut_ivs} to {iq3aut_ivs} versus median {m_stan_ivs}, IQR {iq1stan_ivs} to {iq3stan_ivs}, p{ifelse(p_iv<0.001,'<0.001',paste(' =',p_iv))}, effect size {iv_effectsize})")

```

# Research in context

**Evidence before this study**

Imprecise antibiotic use is a key driver of antimicrobial resistance (AMR). The World Health Organisation (WHO) has therefore set a target for countries to reduce their use of broad-spectrum antibiotics by 2030. Meeting this target is made challenging by the tension between the need to ensure optimal antibiotic effectiveness in patients at high risk of poor infection outcomes and the need to minimise individual and population harm from antibiotic exposure. Machine learning could be applied to healthcare data to support empirical treatment decisions, but this requires a utility function that quantifies the value of different antibiotic treatment options. 

**Added value of this study**

Here, we report a utility function designed to be used in antibiotic treatment and testing decision support systems. It calculates the value of 13 antibiotic treatment options for individual patients with urinary tract infection (UTI) by using clinical prediction models to calculate the probability of different antibiotic outcomes in individual patients, then weighting these probabilities by their importance according to a panel of expert prescribers. This approach manages the tension between antibiotic efficacy and harm by using illness severity scores to balance the need for immediate effectiveness against medium- and long-term individual and population considerations (e.g., development of antibiotic resistance). A microsimulation study using real-world prescribing and microbiology data confirmed the ability of the utility function to generate appropriate antibiotic recommendations for UTI. 

**Implications of all the available evidence**

Our utility function could power decision support tools that leverage data, machine learning, and domain expertise to help clinicians, healthcare providers, and countries reduce medium- and long-term antibiotic harm to individuals and populations without compromising on treatment efficacy when it matters most. Further clinical studies with utility function-based antibiotic decision support tools are required across a range of populations to better understand the impact of decision support tools on individual and population outcomes. 

# Abstract

## Background

Data-driven decision support tools that use machine learning could improve individual and population outcomes from antibiotic treatment. To achieve this, a utility function is required to quantify the value of different antibiotic treatment options. Here, we develop and evaluate a utility function that personalises antibiotic treatments for urinary tract infection (UTI) by combining data/algorithm-driven predictions and prescriber knowledge. 

## Methods

A utility function combining probability predictions, importance weighting, and illness severity inputs was developed. Retrospective healthcare data were used to calculate treatment utility for 13 antibiotics in `r nrow(ur_util) %>% comma()` patients whose urine was sent for culture. The proportions of WHO Access category, oral, intravenous, and overall utility-based treatment recommendations active against urinary pathogens subsequently grown were compared to those prescribed using chi-squared tests. The numbers of Access, oral, intravenous, and overall antibiotics in the top six recommendations that were active against urinary pathogens were compared to a standard panel using Wilcoxon tests.

## Findings

Algorithms based on the utility function recommended more Access `r chi_acs`, oral `r chi_orals`, and overall antibotics `r chi_all` that were active against the urinary pathogen than human antibiotic choices, but fewer intravenous antibiotics `r chi_ivs`. The top six algorithmic recommendations contained more Access `r wil_all`, intravenous `r wil_iv`, and overall antibiotics `r wil_acs`, per specimen that were active against the urinary pathogen than the standard panel, with no difference in oral antibiotics `r wil_po`.

## Interpretation

Our utility function could improve individual and population antibiotic treatment outcomes by leveraging machine learning and prescriber experience to balance risks of antibiotic failure against antibiotic harm. Decision support tools based on the utility function that tailor treatments to diverse populations should be tested in clinical studies.

## Funding

Funded in part by the Wellcome Trust grant ref: 226691/Z/22/Z. Supported by the Office for Life Sciences Data-Action Accelerator award.

# Introduction

Antimicrobial resistance (AMR) is a threat to delivery of global healthcare.[@walshAntimicrobialResistanceAddressing2023] The United Nations General Assembly (UNGA) recently committed to prioritising global use of antibiotics that generate less AMR (World Health Organisation \[WHO\] Access Category).[@un2024_amr] Determining when to use Access antibiotics is challenging — they often have narrower spectra of activity so AMR-generating Watch Category antibiotics are often used instead to ensure efficacy, particularly when there is uncertainty over resistance and/or severe consequences of failure (e.g., sepsis).[@howardPersonalisedAntimicrobialSusceptibility2024, @rheeTrendsEmpiricBroadSpectrum2024]

Algorithmically supporting antibiotic treatment choice could help increase Access antibiotic use by predicting AMR and treatment outcomes using models that combine antibiotic, patient, and pathogen characteristics.[@corbinPersonalizedAntibiogramsMachine2022] Turning predictions into holistic prescribing decisions requires a utility function, an equation combining predictions with domain knowledge to quantify the value of antibiotic treatment options.[@staderAlgorithmsDontHave2024,@walshUtilityFunctionsAutonomic2004] A utility function may give prescribers confidence to use Access antibiotics when appropriate by advising when to avoid them to prioritise efficacy.

Here, we describe a utility function that makes urinary tract infection (UTI) antibiotic treatment choices by combining algorithmic predictions with real-world prescriber domain knowledge and illness severity score. The aim of this simulation study was to assess the potential of the utility function approach to increase Access and oral antibiotic use without reducing the probability of treatment efficacy in patients with severe illness.

# Methods

## Ethics

The study complied with the PhysioNet MIMIC-IV dataset Data Use Agreement 1.5.0. Approval was also obtained for a UK prescriber discrete choice experiment (antibiotic ranking scenario task) from the NHS Health Research Authority (HRA). A UK Research Ethics Committee (IRAS 330186) determined that ethics committee review was not required.

## Data sources and processing

The study required four datasets:

1.  Urine culture data to train models to predict the probability of an empirical antibiotic option being active against the urinary pathogen subsequently grown, i.e., the pathogen grown from urine being susceptible to an antibiotic given empirically before culture data are available.
2.  Antibiotic prescription data to train models to predict probability of *Clostridioides difficile* infection (CDI) and drug toxicity following antibiotic treatment
3.  Emergency Department (ED) patient holdout urine culture data to perform a microsimulation study comparing utility function antibiotic recommendations against antibiotics prescribed.
4.  Antibiotic ranking data from clinicians who undertook a discrete choice experiment (a UTI vignette antibiotic ranking exercise).

Clinical prediction model development and the microsimulation study used data from PhysioNet MIMIC (Medical Information Mart for Intensive Care)-IV version 2.2, an open-source, pseudonymised electronic healthcare record dataset for inpatients and outpatients over the age of 18 admitted to Beth Israel Deaconess Medical Center (Boston, MA) intensive care (ICU) or ED between 2008 and 2019 (<https://physionet.org/content/mimiciv/2.2/>).[@johnsonMIMICIVClinicalDatabase, @johnsonMIMICIVFreelyAccessible2023b, @goldbergerPhysioBankPhysioToolkitPhysioNet2000b] Data preprocessing and quality checking (Appendix 1) were performed consistently across sociodemographic groups using R v4.3.2 (2023-10-31) in a similar way to our previous work personalising antimicrobial susceptibility testing.[@howardPersonalisedAntimicrobialSusceptibility2024, @rstudioref]

Following preprocessing, prescribing and urine culture susceptibility data (likely based on Clinical Laboratory Standards Institute breakpoints) were available for 13 antibiotics (ampicillin, ampicillin-sulbactam, piperacillin-tazobactam, cefazolin, ceftriaxone, cefepime, meropenem, ciprofloxacin, gentamicin, trimethoprim-sulfamethoxazole, nitrofurantoin, and vancomycin).[@patelUpdatingBreakpointsUnited2023] Sample size was determined by dataset size, and likely provided a sufficient case-variable ratio to minimise overfitting risk.[@bramerAvoidingOverfittingDecision2007]. Microsimulation data were positive urine cultures from ED patients taken on the same day that they were triaged and prescribed at least one of the 13 antibiotics above. The acuity variable indicating illness severity at triage was transformed from a 4-1 scale (mild to severe) to a 0-3 scale to facilitate the utility function's mathematics.

Antibiotic cost was determined using each drug's lowest U.S. Department of Veterans Affairs National Acquisition Center procurement price (November 2024) — U.S. dollar values were divided by the highest value (including two-antibiotic combinations) to produce normalised numbers between zero and one.[@supportVANationalAcquisition]

The discrete choice experiment was a UTI vignette antibiotic ranking exercise (Appendix 2) distributed by online survey (<https://www.surveymonkey.com>) between 1st June and October 31st 2024 to UK-based clinicians in general practice (GP), medicine, surgery, ICU, and infectious diseases/medical microbiology (ID/MM) by organisational and departmental email single points of contact. Sample size was determined by the number of respondents with the aim of representing every specialty above. Respondents ranked 13 fictional antibiotics with six characteristics (AWaRe class, CDI risk, toxicity, UTI-specificity, oral and IV administration) in order of suitability in a fictional UTI scenario — this configuration balanced time taken to complete the exercise against risk of variable collinearity.[@buddAdaptationWHOEssential2019]

## Utility function

Our utility function is an equation that calculates the utility/usefulness, $U$, for each antibiotic option in each patient by incorporating the characteristics and consequences of antibiotic treatments, the importance of those consequences, and a safety mechanism.[@zhurisk2021] By design, the minimum possible value of $U$ is zero. We propose that $U$ for antibiotic $x$ in patient $n$ is is defined as\

$$
U^{(x,n)} = p_s^{(x,n)}\left(O^{(x,n)}+C^{(x)}+S^{(x,n)}\right)
$$ {#eq-utility}\

where $p_s^{(x,n)}$ is the probability of the antibiotic being active against the urinary pathogen, and $O^{(x,n)}$, $C^{(x)}$, and $S^{(x,n)}$ relate to antibiotic predicted outcomes, characteristics, and a safety mechanism respectively. We note that $C$ does not depend on $n$ (patient characteristics) because it is defined solely by antibiotic characteristics. If $p_s^{(x,n)}=0$, then $U^{(x,n)}=0$, i.e., the utility of the antibiotic is zero if the probability of the antibiotic being active against the urinary pathogen is zero. In the other extreme case, i.e., $p_s^{(x,n)}=1$, variation in $U^{(x,n)}$ is determined by variation in $O^{(x,n)}$, $C^{(x)}$, and/or $S^{(x,n)}$. Before defining $O^{(x,n)}$, $C^{(x,n)}$, and $S^{(x,n)}$, we must define the function\

$$
u(w, k) = 
\begin{cases}
    wk & \text{if } w \geq 0 \\
    |w|(1-k) & \text{otherwise} \
\end{cases}
$$ {#eq-ufunction}\

where $k$ are either known antibiotic characteristics or outcome probabilities estimated using machine learning clinical prediction models (methodology summarised in Appendix 3). Weights $w$ are the importance of antibiotic characteristics and outcomes to prescribers, and are derived from the contribution of such factors to antibiotic choice in the discrete choice experiment (methodology summarised in Appendix 4). If $w$ is negative, (i.e., an outcome or characteristic that was undesirable to prescribers in the discrete choice experiment), an increase in $k$ reduces the value of $u(w,k)$, and vice versa. $O^{(x,n)}$ is the utility of predicted antibiotic outcomes\

$$
O^{(x,n)} = u(w_c, p_c^{(x,n)}) + u(w_t, p_t^{(x,n)})
$$ {#eq-probability}\

where $p_c^{(x,n)}$ and $p_t^{(x,n)}$ are the patient's estimated probability of CDI and toxicity following antibiotic treatment respectively.

$C^{(x)}$ is the utility of known antibiotic characteristics\

$$
C^{(x)}=u(w_u,v_u^{(x)})+u(w_a,v_a^{(x)})+u(w_o,v_o^{(x)})+u(w_r,v_r^{(x)})+u(w_h,v_h^{(x)})
$$ {#eq-characteristics}\

where $v_u^{(x)}$, $v_a^{(x)}$, $v_o^{(x)}$, and $v_r^{(x)}$ are Boolean (zero or one) values representing the presence or absence of UTI-specificity, Access category, oral administration option, and Reserve category respectively, and $v_h^{(x)}$ is normalised financial cost.

$S^{(x,n)}$ is a safety mechanism for patients with severe infection\

$$
S^{(x,n)}= u(w_i,v_i^{(x)})b\text{ exp}(a^{(n)})
$$ {#eq-safety}\

where $v_i^{(x)}$ is a Boolean for intravenous administration option, $a^{(n)}$ is an illness severity score chosen by the user (e.g., National Early warning score \[NEWS\]), and $b$ calibrates to the chosen score (default $b=1$ used in this study). The minimum illness severity score observed in a population must be zero. As illness severity score increases, patients are more likely to have severe infection (e.g., sepsis), in which case efficacy should be prioritised — increasing $a$ therefore exponentially increases the value of intravenous treatment $u(w_i,v_i^{(x)})$ and the antibiotic being active against the urinary pathogen $p_s^{(x,n)}$. [@buckmanEmpiricAntibioticsSepsis2018]

## Microsimulation study

An individual-level simulation (microsimulation) study projected outcomes of utility function treatment decisions in real-world data.[@DynamicMicrosimulationModels] For each patient, all 13 antibiotics were ranked according to utility value — the antibiotic with the highest utility became that patient's UTI treatment recommendation. Outcomes of interest were:

1.  The proportion of WHO Access category, oral, intravenous, and overall treatment recommendations that would have been active against the urinary pathogen grown, based on the subsequent urine susceptibility results — these were compared with those of antibiotics prescribed by the ED on the day of the urine specimen using a chi-squared test (significance threshold 5%, reported as group proportions and 95% confidence interval).

2.  The median numbers of WHO Access category, oral, intravenous, and overall antibiotics in those with the top six utility values that would have been active against the urinary pathogen grown in each specimen, based on the subsequent urine susceptibility results — these were compared with a standard top six (nitrofurantoin, trimethoprim-sulfamethoxazole, gentamicin, piperacillin-tazobactam, ceftriaxone, and ciprofloxacin from WHO and European Society of Urology UTI treatment guidelines, as used in our personalised antimicrobial susceptibility testing work[@howardPersonalisedAntimicrobialSusceptibility2024, @EAUGuidelinesUrologicala, @WHOAWaReAccess]) using a Wilcoxon signed ranks test (significance threshold 5%, effect size calculated by dividing the test Z statistic by the square root of the total number of specimens).

## Additional analyses

Analyses were performed to assess how utility values and recommendations produced by the utility function changed in response to changes in parameter inputs. Different clinical scenarios were assessed using the microsimulation study design, to observe changes in recommendations and antibiotic activity against urine pathogens with second-line treatment recommendations (antibiotics with the second-highest treatment utility), two-agent antibiotic combinations, improved probability predictions (simulated by moving the probability prediction 50% closer to the Boolean outcome, e.g., a prediction of 0.6 would become 0.8 for a positive outcome and 0.3 for a negative one), and changing nitrofurantoin resistance rates. A sensitivity analysis for the discrete choice experiment was performed in which the same selections favouring oral antibiotics and avoiding high-cost antibiotics were made by 1,000 simulated participants.

# Results

## Participants

Characteristics of the MIMIC-IV urine culture and prescription datasets are summarised in Appendix 5. More urine specimens were from females than males (`r urt(desc_tab,"F")`), and older patients (highest 70-79 [`r urt(desc_tab,"70-79")`]). Illness severity scores of 1 or 2 were commonest — 2.9% (n=10) scored 0 and 10.3% (n=35) scored 3. Most prescriptions were for older patients (highest 60-69 [`r abt(desc_tab,"60-69")`]). The three most commonly-prescribed antibiotics (Appendix 6) were `r abt2(ab_tab,1)`, `r abt2(ab_tab,2)`, and `r abt2(ab_tab,3)`. Forty-nine UK-based prescribers completed the discrete choice experiment (15 medical microbiology and infectious diseases, 11 haemato-oncology/respiratory medicine/acute medicine, nine urology/general surgery, nine ICU, five GP). Mean completion time was 9 minutes, 12 seconds. All participants ranked the same low-cost, low CDI/toxicity risk, orally but not intravenously-administered, UTI-specific Access-category antibiotic either first or second, but other rankings were variable.

## Utility function

Clinical prediction model hyperparameters and predictor variable contributions are summarised in Appendixes 7 and 8 respectively. Resistance to an antibiotic in the last year, gender and age group were large contributors to predicting antibiotic activity against the urine pathogen. Hospital admission or acute kidney injury in the last year, age ≥65, and previous CDI were large contributors to predicting CDI and antibiotic toxicity. Validation receiver operating characteristic (ROC) curves and performance metrics for the clinical prediction models are summarised in Figure 1 and Table 1 respectively (Appendixes 9 and 10 for combinations). Eight models produced AUROCs between 0.7 and 0.8, five between 0.65 and 0.7. The CDI model had the highest AUROC, at `r aucfilter(metrics_singles_table,"CDI")`, and the model predicting Ampicillin activity against the urine pathogen had the lowest, at `r aucfilter(metrics_singles_table,"Ampicillin")`.

```{r, echo=FALSE,message=FALSE,warning=FALSE}

knitr::include_graphics("/Users/alexhoward/Documents/Projects/UDAST_code/roc_plots_main.pdf")
  
```

Figure 1: ROC curves for probability predictions made for single-antibiotic susceptibility, *C. difficile* infection (CDI), and toxicity on the validation dataset.\

```{r, echo=FALSE,message=FALSE,warning=FALSE}

metrics_singles_table <- read_csv("/Users/alexhoward/Documents/Projects/UDAST_code/metrics_singles_table.csv")

knitr::kable(metrics_singles_table)

```

Table 1: Model performance metrics for prediction of single-antibiotic susceptibility, CDI, and antibiotic toxicity in the single validation run on the validation dataset. 95% confidence intervals are displayed in parentheses.\

In the small training dataset stability analysis (Appendix 11), the CDI model had the largest difference in mean AUROC across six random train-test splits (0.675 with 2% versus 0.773 with 12%). The ciprofloxacin susceptibility prediction model had the largest AUROC standard deviation (0.017 with 2%). In the time cluster analysis (Appendix 12), the CDI prediction model had the largest difference in mean AUROC between training and testing year groups (0.948 with 2008-2010:2008-2010 versus 0.570 with 2017-2019:2011-2013) and the largest AUROC standard deviation (0.089 with 2017-2019:2017-2019). In the model fairness analysis (Appendix 13), the largest differences in mean AUROC were observed when predicting antibiotic activity against the urine pathogen for different age groups (0.825 for piperacillin-tazobactam in 40-49s versus 0.664 in 30-39s), races (0.718 for ciprofloxacin in Hispanic patients versus 0.628 in the aggregated least prevalent races), and sexes (0.728 for meropenem in females versus 0.602 in males). The largest AUROC standard deviations were observed between ages, races, and sexes when predicting piperacillin-tazobactam susceptibility (0.104 in ≥90s, 0.083 in Asian patients, 0.019 in males).

The ranked logistic regression model coefficients for antibiotic characteristics predicting participant antibiotic choice in the discrete choice experiment overall and for individual specialties are displayed in Figure 2 and Appendix 14 respectively. UTI-specificity and toxicity increased and decreased the probability of antibiotic selection the most respectively. High antibiotic cost influenced the probability of selection the least. GPs and ID/MM specialists were more likely to select oral than intravenous antibiotics. ICU and medical specialists were more likely to select intravenous than oral antibiotics and most likely to select Access antibiotics. ICU specialists were least likely to select Reserve antibiotics. Wide confidence intervals in the GP subanalysis reflected low respondent numbers (n=5).\

```{r, echo=FALSE,message=FALSE,warning=FALSE}

knitr::include_graphics("/Users/alexhoward/Documents/Projects/UDAST_code/ORplot.pdf")

```

Figure 2: Coefficients from the ranked logit analysis of the discrete choice experiment across all prescriber specialties.\

## Microsimulation study

The distributions of antibiotic utility values for patients across the microsimulation dataset overall, by speciality subtype, and including combinations are displayed in Figure 3, Appendix 15, and Appendix 16 respectively. Nitrofurantoin had the highest median utility across the population (`r utilsum(util_probs_df,1,"median")`), and vancomycin the lowest (`r utilsum(util_probs_df,13,"median")`). Cefazolin had the widest utility spread (IQR width `r utilsum(util_probs_df,1,"IQR")`), reflecting variation in susceptibility probability (IQR width `r round(wideiqr,3)`). Nitrofurantoin had the highest median utility across the population in all specialty subgroups and the combination subanalysis. Ampicillin and gentamicin was the combination regimen with the highest median utility. Variations in population utility were consistent with axioms of the utility function when individual inputs were manipulated (Appendix 17).\

```{r, echo=FALSE,message=FALSE,warning=FALSE}
knitr::include_graphics("/Users/alexhoward/Documents/Projects/UDAST_code/utility_Treatment_ (single agent).pdf")
```

Figure 3: Distributions of antibiotic utility values for patients across the microsimulation dataset.\

The proportions of urinary pathogens that were susceptible to utility function treatment recommendations and actual ED prescriptions for patients with different illness severity scores are displayed in Figure 4. The recommendations themselves are displayed in Figure 5.  The utility function recommended more Access `r chi_acs`, oral `r chi_orals`, and overall `r chi_all` antibiotics active against the urinary pathogen than human ED prescriptions, but fewer active intravenous antibiotics `r chi_ivs`. Access and oral antibiotics (nitrofurantoin, gentamicin, and ampicillin-sulbactam) were deprioritised in favour of intravenous Watch category agents (piperacillin-tazobactam) in patients with higher illness severity scores, resulting in similar rates of antibiotic activity (`r glue("{round(perc_util,1)}%")`) than actual ED prescriptions (`r glue("{round(perc_actual,1)}%")`) at the highest illness severity. Actual ED prescriptions changed from nitrofurantoin, through ceftriaxone, to piperacillin-tazobactam plus vancomycin with increasing illness severity. The six highest-utility antibiotics (Appendix 18) contained more Access `r wil_acs`, intravenous `r wil_iv`, and overall antibiotics `r wil_all` per specimen on average that were active against the urinary pathogen than the standard panel, with no difference in oral antibiotics `r wil_po`.

```{r, echo=FALSE,message=FALSE,warning=FALSE}
knitr::include_graphics("/Users/alexhoward/Documents/Projects/UDAST_code/Utility function Access agent activity against pathogen by severity score.pdf")
knitr::include_graphics("/Users/alexhoward/Documents/Projects/UDAST_code/ED prescription Access agent activity against pathogen by severity score.pdf")
knitr::include_graphics("/Users/alexhoward/Documents/Projects/UDAST_code/Utility function oral agent activity against pathogen by severity score.pdf")
knitr::include_graphics("/Users/alexhoward/Documents/Projects/UDAST_code/ED prescription oral agent activity against pathogen by severity score.pdf")
knitr::include_graphics("/Users/alexhoward/Documents/Projects/UDAST_code/Utility function IV agent activity against pathogen by severity score.pdf")
knitr::include_graphics("/Users/alexhoward/Documents/Projects/UDAST_code/ED prescription IV agent activity against pathogen by severity score.pdf")
```

Figure 4: The proportion of urinary tract infection (UTI) pathogens grown in urine specimens that were susceptible to the utility function first-line antibiotic treatment recommendation (left) and emergency department (ED) prescriptions from the dataset (right) depending on illness severity, with the proportion of pathogens susceptible to Access category agents (top), agents with oral routes of administration (middle), and agents with intravenous routes of administration (bottom) also indicated. The UNGA 70% Access agent target is displayed as a green dotted line on the top plots.\

```{r, echo=FALSE,message=FALSE,warning=FALSE}
knitr::include_graphics("/Users/alexhoward/Documents/Projects/UDAST_code/illness_abplot.pdf")
knitr::include_graphics("/Users/alexhoward/Documents/Projects/UDAST_code/illness_abplot_px_abx.pdf")

```

Figure 5: The make-up of utility function first-line treatment recommendations by antibiotic agent depending on illness severity. The top plot is for utility function recommendations, the bottom plot for antibiotics that were actually prescribed.\

Median predicted CDI probability, toxicity probability and cost of utility function recommendations were `r ifelse(zeroprob(cdi_df)<0.001,'<0.001',zeroprob(cdi_df))`, `r zeroprob(tox_df)`, and \$`r zeroprob(cost_df)` respectively at minimum illness severity, and `r ifelse(maxprob(cdi_df)<0.001,'<0.001',maxprob(cdi_df))`, `r maxprob(tox_df)`, and \$`r maxprob(cost_df)` at maximum illness severity. Median predicted CDI probability, toxicity probability and cost of actual ED prescriptions were `r ifelse(zeroprob(cdi_df_px_abx)<0.001,'<0.001',zeroprob(cdi_df_px_abx))`, `r zeroprob(tox_df_px_abx)`, and \$`r zeroprob(cost_df)` respectively at minimum illness severity, and `r ifelse(maxprob(cdi_df)<0.001,'<0.001',maxprob(cdi_df_px_abx))`, `r maxprob(tox_df_px_abx)`, and \$`r maxprob(cost_df_px_abx)` at maximum illness severity.

## Additional analyses

Second-line utility function recommendations (Appendix 19) maintained higher coverage and Access antibiotic use than first-line recommendations by frequently recommending gentamicin. Two-agent recommendations (Appendix 20) further increased the proportion of pathogens susceptible to recommendations by frequently recommending ampicillin with gentamicin. Artificially improving model predictive accuracy (Appendix 21) provided the highest proportion of pathogens susceptible to recommendations and trimethoprim-sulfamethoxazole was used more frequently than in the other subanalyses. Increasing illness severity score of the whole population in parallel (Appendix 22) increased the proportion of pathogens susceptible to recommendations more than in the main analysis, reflecting higher resistance rates at high illness severity scores (`r t3` at three versus `r t0` at zero). Increasing median nitrofurantoin predicted resistance probability (Appendix 23) reduced the proportion of pathogens susceptible to recommendations overall. When extreme discrete choice experiment results were simulated (Appendix 24) oral antibiotics appropriately scored higher and more expensive antibiotics scored lower, with an unanticipated strongly negative ranked logit coefficient for UTI-specificity — this corrected when antibiotics options were changed to reduce collinearity between oral administration and UTI-specificity (Appendix 25).\

# Discussion

This study suggests that decision support systems based on our utility function could improve the appropriateness of empirical antibiotic prescribing for UTI, for three reasons: firstly, clinical prediction models estimate probabilities of treatment outcomes more objectively than prescribers; secondly, discrete choice experiments quantify value more holistically than algorithms by leveraging expert prescriber knowledge that is cannot be found in databases; and thirdly, the safety mechanism weighs the risks of untreated infection against antibiotic-related harm and AMR generation.

We envisage utility being calculated for patients based on their healthcare record data when a urine culture test is ordered, and used to select treatment/testing recommendations in real-time. The recommendations could algorithmically account for antibiotic allergies and contraindications (not done here due to a lack of allergy information). The discrete choice experiment should be undertaken by local prescriber stakeholders stratified by specialty to ensure their priorities are reflected in utility calculations, and the utility function should be calibrated to chosen illness severity metrics (e.g., NEWS) with their input to ensure acceptable probability of activity against urinary pathogens. The inclusion of antibiotic cost also allows low- and middle-income country (LMIC) resource considerations to be incorporated. Digital infrastructure may be a barrier to personalised recommendations in LMICs, but not to population and policy-level decisions (e.g., antibiotic formularies and supply chains).

The microsimulation approach gauges the potential clinical performance of algorithms in a more meaningful way than metrics such as AUROC, but the utility function should be further validated in clinical studies. The approach should be tested in different populations to ensure observed differences in clinical prediction model performance between demographic groups, time windows, and training dataset sizes do not affect outcomes. The utility function adapts to AMR rates, but the impact of this will need to be evaluated in clinical settings, including rare/unexpected events (e.g., carbapenem resistance). The effects of utility function-based decision support systems as a healthcare interventions will need to be studied in real-world clinical settings to ensure they work as intended and are implementable at scale. Recommendations that include antibiotic combinations should also be tested in the real world, given that they perform well in this simulation study, are already commonly-used, and may become necessary as global AMR increases — populations with high combination antibiotic use will be required to optimise outcome predictions.

The discrete choice experiment methodology for developing utility function-based clinical decision support systems should be honed in future studies. The inclusion of more antibiotic options and variables will reduce the risk of model collinearity and incorporate more considerations (e.g., antibiotic accessibility in LMICs, oral bioavailability, and suitability for outpatient parenteral antibiotic therapy) — however, this should be balanced against the time taken to complete the survey to ensure sufficient sample size for a robust model.

Our study has several limitations: firstly, the urine dataset was limited to secondary care patients, the prescription dataset to inpatients, and the microsimulation dataset to ED patients — the approach needs to be validated in primary care where most antibiotic prescriptions occur; secondly, we have not examined potential outcomes where organisms are not grown in urinary specimens, and there were insufficient antibiotic contraindication data to detect barriers to recommendations — however, second-line recommendations also provided high proportions of Access and oral recommendations active against the urinary pathogen; thirdly, there were few GP respondents in the discrete choice experiment — further work is required to understand how best to engage busy clinicians in generating these vital qualitative and quantitative data.

Despite these limitations, this study demonstrates how a utility function that quantifies the key considerations of antibiotic prescribing decisions (namely the probability and importance of different outcomes, and the consequences of ineffective treatment) could improve the appropriateness of antibiotic prescribing through appropriate prioritisation of Access and oral antibiotic prescribing. Most importantly, it does this in a way that does not endanger clinical efficacy where it matters most - in severely ill patients at high risk of deterioration from sepsis. Further research is required in a clinical study across multiple populations and care settings to better understand the impact of utility function-based antibiotic decision support on individual and population outcomes.

# References

::: {#refs}
:::

# Funding

This research was funded in part by the Wellcome Trust grant ref: 226691/Z/22/Z. For the purpose of open access, the author has applied a CC BY public copyright licence to any Author Accepted Manuscript version arising from this submission. Office for Life Sciences Data-Action Accelerator award also supported this work. The funders had no role in the conceptualisation, design, data collection, analysis, decision to publish or preparation of the manuscript.

# Conflicts of interest

Alex Howard declares personal consulting work for Pfizer outside the submitted work, and a donation from Pfizer to the University of Liverpool for a public and professional engagement project outside the submitted work.

# Data sharing

The MIMIC-IV version 2.2 data set is publicly accessible as a credentialed PhysioNet user at https://physionet.org/content/mimiciv/2.2/ once mandated training is completed, and the data use agreement is signed. Additional aggregate-level data can be provided by the authors if requests to do so are in line with legal and ethical data use regulations. Open-source code written for this study will be made available upon publication.

# Code sharing

Open-source code to reproduce the study using the above dataset is available at <https://github.com/amh312/Antimicrobial_utility>.

## Contributions

AH conceived the utility function and associated study, developed the utility function, performed data engineering and mathematical modelling, and wrote the manuscript including diagrams. PG provided edits and suggestions for the utility function design, mathematical notation, and manuscript. AG, YZ, DH, AV, SM, and IB provided edits and suggestions for the manuscript. WH provided feedback and support on initial utility function and study design, and edits and suggestions on the manuscript.

## Acknowledgements

We would like to thank the healthcare professionals who participated in the discrete choice experiment.
